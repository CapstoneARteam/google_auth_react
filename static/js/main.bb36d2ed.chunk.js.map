{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","responseGoogle","response","console","log","setState","username","profileObj","name","email","profileimg","imageUrl","state","SignedIn","email_test","stitch_res","addUser","bind","getallusers","emailchange","this","client","Stitch","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","factory","db","auth","loginWithCredential","AnonymousCredential","then","collection","find","limit","asArray","catch","error","event","preventDefault","insertOne","target","value","className","id","src","G_login","type","onChange","onClick","map","info","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0QASqBA,E,kDACnB,aAAc,IAAD,8BACX,gBA0BFC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SACH,CACEC,SAAWJ,EAASK,WAAWC,KAC/BC,MAAOP,EAASK,WAAWE,MAC3BC,WAAYR,EAASK,WAAWI,WAGpCR,QAAQC,IAAI,EAAKQ,QAlCjB,EAAKA,MAAQ,CACXC,UAAW,EACXP,SAAW,GACXG,MAAO,GACPC,WAAY,GACZI,WAAW,GACXC,WAAW,IAEb,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAZR,E,gEAgBXG,KAAKC,OAASC,IAAOC,2BAA2B,wBAChD,IAAMC,EAAUJ,KAAKC,OAAOI,iBAC1BC,IAAkBC,QAClB,iBAEFP,KAAKQ,GAAKJ,EAAQI,GAAG,YACrBR,KAAKC,OAAOQ,KAAKC,oBAAoB,IAAIC,KAAuBC,KAC9D7B,QAAQC,IAAIgB,KAAKQ,GAAGK,WAAW,SAASC,KAAK,GAAI,CAACC,MAAO,KAAKC,YAC9DC,MAAMlC,QAAQmC,S,8BAeVC,GACNA,EAAMC,iBACNpB,KAAKQ,GAAGK,WAAW,SAChBQ,UAAU,CACThC,MAAOW,KAAKR,MAAME,WAClBN,KAAK,gBAEN6B,MAAMlC,QAAQmC,S,oCAIJ,IAAD,OACZlB,KAAKQ,GAAGK,WAAW,SAASC,KAAK,IAChCE,UACAJ,MAAK,SAAAjB,GAAU,OAAI,EAAKV,SAAS,CAACU,kBACnCZ,QAAQC,IAAIgB,KAAKR,MAAMG,c,kCAGbwB,GACVnB,KAAKf,SAAS,CAACS,WAAYyB,EAAMG,OAAOC,U,+BAIxC,OACE,yBAAKC,UAAU,OACb,uBAAGC,GAAG,QAAN,SAAoBzB,KAAKR,MAAMN,UAC/B,uBAAGuC,GAAG,SAAN,UAAsBzB,KAAKR,MAAMH,OACjC,6BACA,yBAAKoC,GAAG,aAAaC,IAAK1B,KAAKR,MAAMF,aACrC,6BACA,6BAECU,KAAK2B,UAEN,6BACA,6BACA,2BAAOC,KAAK,OAAOH,GAAI,aAAaI,SAAU7B,KAAKD,cACnD,4BAAQ0B,GAAG,MAAMK,QAAS9B,KAAKJ,SAA/B,QACA,6BAEA,4BAAQ6B,GAAG,OAAOK,QAAS9B,KAAKF,aAAhC,YACA,4BACGE,KAAKR,MAAMG,WAAWoC,KAAI,SAAAC,GACzB,OAAO,4BAAKA,EAAK3C,MAAV,Y,gCAWf,OAAGW,KAAKR,MAAMC,SAEZ,6BAAK,iDAKH,kBAAC,IAAD,CACEwC,SAAU,2EACVC,WAAa,QACbC,UAAWnC,KAAKnB,eAChBuD,UAAWpC,KAAKnB,eAChBwD,aAAc,2B,GA1GSC,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMoC,c","file":"static/js/main.bb36d2ed.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport GoogleLogin from 'react-google-login'\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\n\r\nimport {Stitch, AnonymousCredential, RemoteMongoClient} from \"mongodb-stitch-browser-sdk\"\r\n\r\n\r\nexport default class App extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      SignedIn : false,\r\n      username : '',\r\n      email: '',\r\n      profileimg: '',\r\n      email_test:'',\r\n      stitch_res:[],\r\n    }\r\n    this.addUser = this.addUser.bind(this);\r\n    this.getallusers = this.getallusers.bind(this);\r\n    this.emailchange = this.emailchange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.client = Stitch.initializeDefaultAppClient(\"capstonear_app-xkqng\")\r\n    const mongodb = this.client.getServiceClient(\r\n      RemoteMongoClient.factory,\r\n      \"mongodb-atlas\"\r\n    );\r\n    this.db = mongodb.db(\"ACCOUNTS\");\r\n    this.client.auth.loginWithCredential(new AnonymousCredential()).then(\r\n      console.log(this.db.collection(\"USERS\").find({}, {limit: 50}).asArray())\r\n    ).catch(console.error)\r\n  }\r\n\r\n  responseGoogle = (response) => {\r\n    console.log(response);\r\n    this.setState(\r\n      {\r\n        username : response.profileObj.name,\r\n        email: response.profileObj.email,\r\n        profileimg: response.profileObj.imageUrl,\r\n      }\r\n    )\r\n    console.log(this.state)\r\n  }\r\n\r\n  addUser(event) {\r\n    event.preventDefault()\r\n    this.db.collection(\"USERS\")\r\n      .insertOne({\r\n        email: this.state.email_test,\r\n        name:\"hello world\" \r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  getallusers() {\r\n    this.db.collection(\"USERS\").find({})\r\n    .asArray()\r\n    .then(stitch_res => this.setState({stitch_res}))\r\n    console.log(this.state.stitch_res)\r\n  }\r\n  \r\n  emailchange(event){\r\n    this.setState({email_test: event.target.value})\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <p id=\"Name\">Name: {this.state.username}</p>\r\n        <p id=\"Email\">Email: {this.state.email}</p>\r\n        <br/>\r\n        <img id=\"profileimg\" src={this.state.profileimg}></img>\r\n        <br/>\r\n        <br/>\r\n\r\n        {this.G_login()}\r\n        \r\n        <br />\r\n        <br />\r\n        <input type=\"text\" id =\"emailinput\" onChange={this.emailchange} />\r\n        <button id=\"add\" onClick={this.addUser}>add </button>\r\n        <br />\r\n\r\n        <button id=\"list\" onClick={this.getallusers}>list all</button>\r\n        <ul>\r\n          {this.state.stitch_res.map(info => {\r\n            return <li>{info.email} </li>\r\n          })}\r\n\r\n        </ul>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  G_login(){\r\n    if(this.state.SignedIn){\r\n      return(\r\n      <div><p>Already Signed In</p></div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <GoogleLogin\r\n          clientId =\"985223166095-8i4k79t4c9uqlq5sbe1sljmvq1cefn5r.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess={this.responseGoogle}\r\n          onFailure={this.responseGoogle}\r\n          cookiePolicy={'single_host_origin'}\r\n        ></GoogleLogin>\r\n        \r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}