{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","responseGoogle","response","console","log","setState","username","profileObj","name","email","profileimg","imageUrl","state","db","collection","insertOne","account_type","account_type_test","catch","error","SignedIn","email_test","name_test","stitch_res","addUser","bind","getallusers","emailchange","namechange","SearchUser","ChangeEmail","acctypechange","OldEmail","React","createRef","NewEmail","this","client","Stitch","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","factory","auth","loginWithCredential","AnonymousCredential","then","find","limit","asArray","event","preventDefault","target","value","query","findOne","result","current","update","findOneAndUpdate","className","id","src","G_login","type","placeholder","onChange","onClick","map","info","ref","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c6bbc87b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport GoogleLogin from 'react-google-login'\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\n\r\nimport {Stitch, AnonymousCredential, RemoteMongoClient} from \"mongodb-stitch-browser-sdk\"\r\n\r\n\r\nexport default class App extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      SignedIn : false,\r\n      username : '',\r\n      email: '',\r\n      \r\n      profileimg: '',\r\n      email_test:'',\r\n      name_test:'',\r\n      account_type_test: 'user',\r\n      stitch_res:[],\r\n    }\r\n    this.addUser = this.addUser.bind(this);\r\n    this.getallusers = this.getallusers.bind(this);\r\n    this.emailchange = this.emailchange.bind(this);\r\n    this.namechange = this.namechange.bind(this);\r\n    this.SearchUser=this.SearchUser.bind(this);\r\n    this.ChangeEmail=this.ChangeEmail.bind(this);\r\n    this.acctypechange=this.acctypechange.bind(this);\r\n    this.OldEmail = React.createRef();\r\n    this.NewEmail = React.createRef();\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.client = Stitch.initializeDefaultAppClient(\"capstonear_app-xkqng\")\r\n    const mongodb = this.client.getServiceClient(\r\n      RemoteMongoClient.factory,\r\n      \"mongodb-atlas\"\r\n    );\r\n    this.db = mongodb.db(\"ACCOUNTS\");\r\n    this.client.auth.loginWithCredential(new AnonymousCredential()).then(\r\n      console.log(this.db.collection(\"USERS\").find({}, {limit: 50}).asArray())\r\n    ).catch(console.error)\r\n  }\r\n\r\n  responseGoogle = (response) => {\r\n    console.log(response);\r\n    this.setState(\r\n      {\r\n        username : response.profileObj.name,\r\n        email: response.profileObj.email,\r\n        profileimg: response.profileObj.imageUrl,\r\n      }\r\n    )\r\n    console.log(this.state)\r\n    this.db.collection(\"USERS\")\r\n      .insertOne({\r\n        email: this.state.email,\r\n        name: this.state.username,\r\n        account_type: this.state.account_type_test\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n  addUser(event) {\r\n    event.preventDefault()\r\n    this.db.collection(\"USERS\")\r\n      .insertOne({\r\n        email: this.state.email_test,\r\n        name: this.state.name_test,\r\n        account_type: this.state.account_type_test,\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  getallusers() {\r\n    this.db.collection(\"USERS\").find({})\r\n    .asArray()\r\n    .then(stitch_res => this.setState({stitch_res}))\r\n    console.log(this.state.stitch_res)\r\n  }\r\n  \r\n  emailchange(event){\r\n    this.setState({email_test: event.target.value})\r\n  }\r\n  namechange(event){\r\n    this.setState({name_test: event.target.value})\r\n  }\r\n  acctypechange(event){\r\n    this.setState({account_type_test: event.target.value})\r\n  }\r\n\r\n  SearchUser(event)\r\n  {\r\n    const query ={\"email\":event.target.value};\r\n    return this.db.collection(\"USERS\").findOne(query).then(result=>{\r\n      if(result){\r\n        console.log(\"Found\");\r\n      }\r\n      else{\r\n        console.log(\"No found\");\r\n      }\r\n      return result;\r\n    })}\r\n  ChangeEmail(event)\r\n  {\r\n      const query ={\"email\":this.OldEmail.current.value};\r\n      const update={\"email\":this.NewEmail.current.value};\r\n      return this.db.collection(\"USERS\").findOneAndUpdate(query,update).then(result=>{\r\n        if(result){\r\n          console.log(\"Found and update\");\r\n        }\r\n        else{\r\n          console.log(\"No found\");\r\n        }\r\n        return result;\r\n      })\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <p id=\"Name\">Name: {this.state.username}</p>\r\n        <p id=\"Email\">Email: {this.state.email}</p>\r\n        <br/>\r\n        <img id=\"profileimg\" src={this.state.profileimg}></img>\r\n        <br/>\r\n        <br/>\r\n\r\n        {this.G_login()}\r\n        \r\n        <br />\r\n        <br />\r\n        <input type=\"text\" id =\"nameinput\" placeholder=\"Enter name here\" onChange={this.namechange}/>\r\n        <input type=\"text\" id =\"emailinput\" placeholder=\"Enter email here\" onChange={this.emailchange}/>\r\n        <select id=\"account type\" onChange={this.acctypechange}>\r\n          <option value=\"user\">User</option>\r\n          <option value=\"admin\">Admin</option>\r\n        </select>\r\n        <button id=\"add\" onClick={this.addUser}>add </button>\r\n        <br />\r\n\r\n        <button id=\"list\" onClick={this.getallusers}>list all</button>\r\n        <ul>\r\n          {this.state.stitch_res.map(info => {\r\n            return <li>{info.email} / {info.name} / {info.account_type}</li>\r\n          })}\r\n        </ul>\r\n        <input type=\"text\" id=\"search\" placeholder=\"Enter email to search\"onClick={this.SearchUser}/>\r\n        <br/>\r\n        <br/>\r\n        <input type=\"text\" placeholder=\"Enter current email here\" ref={this.OldEmail} />\r\n        <input type=\"text\" placeholder=\"Enter new email here\" ref={this.NewEmail}/>\r\n        <button onClick={this.ChangeEmail}>Change Email</button>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  G_login(){\r\n    if(this.state.SignedIn){\r\n      return(\r\n      <div><p>Already Signed In</p></div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <GoogleLogin\r\n          clientId =\"985223166095-8i4k79t4c9uqlq5sbe1sljmvq1cefn5r.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess={this.responseGoogle}\r\n          onFailure={this.responseGoogle}\r\n          cookiePolicy={'single_host_origin'}\r\n        ></GoogleLogin>\r\n        \r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}